version: 2.1

# -------------------------------------------------------------------------------------
# Commands
# -------------------------------------------------------------------------------------

commands:

  py_3_6_setup:
    description: "Install and switch to Python 3.6.9; also install pip and pytest."
    steps:
      - run:
          name: "Setup Python v3.6.9 environment"
          command: |
            pyenv install -s 3.6.9
            pyenv global 3.6.9
            pyenv local 3.6.9
            pyenv versions
            echo "In venv: $(pyenv local) - $(python -V), $(pip -V)"
            sudo "$(which python)" -m pip install --upgrade pip
            sudo "$(which python)" -m pip install pytest

  pip_install:
    description: "Simple install via pip with no extra deps to build the website."
    steps:
      - run:
          name: "Simple PIP install"
          command: |
            echo "Using $(python -V) ($(which python))"
            sudo "$(which python)" -m pip install -e .

  pip_dev_install:
    description: "Install dependencies via pip, including extra deps. Also supports more options, such as building on top of PyTorch nightly."
    parameters:
      args:
        type: string
        default: ""
    steps:
      - run:
          name: "Install dependencies via pip"
          command: ./scripts/install_via_pip.sh << parameters.args >>

  lint_flake8:
    description: "Lint with flake8"
    steps:
      - run:
          name: "Lint with flake8"
          command: flake8 --config ./.circleci/flake8_config.ini

  lint_black:
    description: "Lint with black"
    steps:
      - run:
          name: "Lint with black"
          command: black --check --diff .

  isort:
    description: "Check import order with isort"
    steps:
      - run:
          name: "Check import order with isort"
          command: isort -v -l 88 -o opacus --lines-after-imports 2 -m 3 --trailing-comma --check-only .

  mypy_check:
    description: "Static type checking with mypy"
    steps:
      - run:
          name: "Mypy checks"
          command: ./scripts/run_mypy.sh

  configure_docusaurus_bot:
    description: "Configure Docusaurus GitHub bot"
    steps:
      - run:
          name: "Configure Docusaurus GitHub bot"
          command: |
              git config --global user.email "docusaurus-bot@users.noreply.github.com"
              git config --global user.name "Opacus website deployment script"
              echo "machine github.com login docusaurus-bot password $DOCUSAURUS_GITHUB_TOKEN" > ~/.netrc

  deploy_site:
    description: "Deploy website to GitHub Pages"
    steps:
      - run:
          name: "Deploy website to GitHub Pages"
            # TODO: make the installation above conditional on there being relevant changes (no need to install if there are none)
          command: |
              mkdir -p website/static/.circleci && cp -a .circleci/. website/static/.circleci/.
              cd website
              ./scripts/build_website.sh -b
              GIT_USER=docusaurus-bot yarn run publish-gh-pages


  unit_tests:
    description: "Run unit tests"
    steps:
      - run:
          name: "Unit tests"
          no_output_timeout: 1h
          command: |
            mkdir unittest-reports
            python -m pytest --junitxml=unittest-reports/junit.xml

      - store_test_results:
          path: unittest-reports
      - store_artifacts:
          path: unittest-reports

  mnist_integration_test:
    description: "Runs MNIST end to end"
    parameters:
      device:
        default: "cpu"
        type: string
    steps:
      - run:
          name: MNIST example
          command: |
            mkdir mnist-test-reports
            PYTHONPATH=. python3 examples/mnist.py --lr 0.25 --sigma 0.7 -c 1.5 --batch-size 16 --epochs 2 --data-root . --n-runs 1 --device <<parameters.device>>
      - store_test_results:
          path: mnist-test-reports
      - store_artifacts:
          path: mnist-test-reports

# -------------------------------------------------------------------------------------
# Jobs
# -------------------------------------------------------------------------------------

jobs:

  lint_py36_torch_release:
    docker:
      - image: circleci/python:3.6.9
    steps:
      - checkout
      - pip_dev_install
      - lint_flake8
      - lint_black
      - isort
      # - mypy_check  TODO re-enable

  unittest_py36_torch_release:
    docker:
      - image: circleci/python:3.6.9
    steps:
      - checkout
      - pip_install
      - unit_tests

  unittest_py37_torch_release:
    docker:
      - image: circleci/python:3.7.9
    steps:
      - checkout
      - pip_install
      - unit_tests

  unittest_py38_torch_release:
    docker:
      - image: circleci/python:3.8.5
    steps:
      - checkout
      - pip_install
      - unit_tests

  unittest_py38_torch_nightly:
    docker:
      - image: circleci/python:3.8.5
    steps:
      - checkout
      - pip_dev_install:
          args: "-n"
      - unit_tests

  integrationtest_py36_torch_release_cpu:
    docker:
      - image: circleci/python:3.6.9
    steps:
      - checkout
      - pip_install
      - mnist_integration_test:
        device: "cpu"

  integrationtest_py36_torch_release_cuda:
    machine:
      resource_class: gpu.nvidia.small
      image: ubuntu-1604-cuda-10.1:201909-23
    steps:
      - checkout
      - py_3_6_setup
      - pip_install
      - mnist_integration_test:
        device: "cuda"

  auto_deploy_site:
    docker:
      - image: circleci/python:3.6.9
    steps:
      - checkout
      - pip_dev_install:
          args: "-n -d"
      - configure_docusaurus_bot
      - deploy_site


aliases:

  - &exclude_ghpages
    branches:
      ignore:
        - gh-pages

# -------------------------------------------------------------------------------------
# Workflows
# -------------------------------------------------------------------------------------

workflows:
  commit:
    jobs:
      - lint_py36_torch_release:
          filters: *exclude_ghpages
      - unittest_py36_torch_release:
          filters: *exclude_ghpages
      - unittest_py37_torch_release:
          filters: *exclude_ghpages
      - unittest_py38_torch_release:
          filters: *exclude_ghpages
      - unittest_py38_torch_nightly:
          filters: *exclude_ghpages
      - integrationtest_py36_torch_release_cpu:
          filters: *exclude_ghpages
      - integrationtest_py36_torch_release_cuda:
          filters: *exclude_ghpages

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - unittest_py38_torch_nightly:
          filters: *exclude_ghpages
      - integrationtest_py36_torch_release_cpu:
          filters: *exclude_ghpages
      - integrationtest_py36_torch_release_cuda:
          filters: *exclude_ghpages

  website_deployment:
    jobs:
      - auto_deploy_site:
          filters:
            branches:
              only:
                - master
